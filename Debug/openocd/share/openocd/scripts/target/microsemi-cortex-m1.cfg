#**************************************************************************
#   Copyright (c) 2015-2019 by Microsemi Corporation (a Microchip company)*
#   https://www.microsemi.com/product-directory/4193-support              *
#                                                                         *
#   This program is free software; you can redistribute it and/or modify  *
#   it under the terms of the GNU General Public License as published by  *
#   the Free Software Foundation; either version 2 of the License, or     *
#   (at your option) any later version.                                   *
#                                                                         *
#   This program is distributed in the hope that it will be useful,       *
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#   GNU General Public License for more details.                          *
#                                                                         *
#   You should have received a copy of the GNU General Public License     *
#   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
#**************************************************************************

#------------------------------------------------------------------------------
# Microsemi Cortex-M1
#
# https://www.microsemi.com/product-directory/mi-v-ecosystem/5068-arm-cortex-m1-processor
#------------------------------------------------------------------------------

#
# If DEVICE not defined then just use the generic "FPGA". 
#

if {![exists DEVICE]} {
    set DEVICE "FPGA"
}

#
# Enable ITCM Lower and Upper aliases?
# 

if {![exists ITCM_ALIASES]} {
    set ITCM_ALIASES "Y"
} else {
    set ITCM_ALIASES_UPPER [string toupper $ITCM_ALIASES]
    if {($ITCM_ALIASES_UPPER ne "Y") && ($ITCM_ALIASES_UPPER ne "N")} {
        error [format "Error: invalid ITCM_ALIASES value \"%s\" specified - must be \"Y\" or \"N\"" $ITCM_ALIASES]
    }
    set ITCM_ALIASES $ITCM_ALIASES_UPPER
}

# IRCODE needed to address UJTAG/uj_jtag slave 
if {![exists UJ_JTAG_IRCODE]} {
    # TODO: validate - e.g. 2 hex digit value
    set UJ_JTAG_IRCODE 0x33
}

if {$FPGA_TAP eq "Y"} {

    # FPGA TAP present, occludes Cortex-M3 CPU TAP and must be disabled/bypassed first

    # Start off in standard JTAG mode
    microsemi_flashpro tunnel_jtag_via_ujtag off	

    #
    # FPGA TAP
    #

    jtag newtap $DEVICE tap -irlen 8 -expected-id 0 -ignore-version
    jtag configure $DEVICE.tap -event tap-disable "disable_fpga_tap $DEVICE.tap"
    jtag configure $DEVICE.tap -event setup "switch_from_fpga_tap_to_m1_tap $DEVICE.tap $DEVICE.cpu"

    #
    # Cortex-M1 CPU TAP - disabled/not visible by default until FPGA TAP disabled/bypassed
    #

    jtag newtap $DEVICE cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x0ba00477 -ignore-version -disable
    jtag configure $DEVICE.cpu -event tap-enable "enable_m1_tap"

    #
    # TAP management event handlers/procedures
    #

    # Switch from FPGA TAP to Cortex-M1 CPU TAP (by tunnelling JTAG via UJTAG)
    proc switch_from_fpga_tap_to_m1_tap {fpga_tap m1_tap} {
        jtag tapdisable $fpga_tap
        jtag tapenable $m1_tap

        # Read Cortex-M1 IDCODE as a sanity check
        irscan $m1_tap 0x0e
        set idcode [string tolower [drscan $m1_tap 32 0]]
        echo [format "Info : Cortex-M1 IDCODE = 0x%s" $idcode]
    }

    # Disable/bypass FPGA TAP
    proc disable_fpga_tap {fpga_tap} {
        global UJ_JTAG_IRCODE

        # Tell UJTAG/uj_jtag to address Cortex-M1
        irscan $fpga_tap $UJ_JTAG_IRCODE -endstate IRPAUSE
        runtest 8

        # Enable tunnelled JTAG mode
        microsemi_flashpro tunnel_jtag_via_ujtag on
    }

    # Enable Cortex-M1 CPU TAP
    proc enable_m1_tap {} {
        # Nothing to do here - the work is done in disable_fpga_tap
        # but the handler still needs to be defined
    }

} else {

    # "Direct" debugging not via FPGA TAP

    #
    # Cortex-M1 CPU TAP 
    #

    jtag newtap $DEVICE cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x0ba00477 -ignore-version
}

#
# Cortex-M3 DAP
#

dap create $DEVICE.dap -chain-position $DEVICE.cpu

#
# Target CPU
#

set _TARGETNAME $DEVICE.cpu
target create $_TARGETNAME cortex_m -dap $DEVICE.dap

#
# Flash
#

#
# Flash may be defined via parameters:
# FLASH_DRIVER: cfi or microsemi-fusion-coreahbnvm (for Fusion/AFSXXX) or
#     microsemi-smartfusion2-envm (for SmartFusion2/M2SXXX) or
#     microsemi-smartfusion-envm (for SmartFusion/A2FXXX)
# FLASH_BASE - e.g. 0x10000000
# FLASH_SIZE - e.g. 0x8000
# FLASH_WIDTH - e.g. 0, 1, 2 or 4 or not defined (defaults to 0)
# If FLASH_DRIVER is defined then the other parameters are assumed to be defined
# and to be valid
#

if {[exists FLASH_DRIVER]} {
    flash bank $DEVICE.flash $FLASH_DRIVER $FLASH_BASE $FLASH_SIZE 0 0 $_TARGETNAME
}

#
# Reset configuration
#

# SRSTn not implemented so use SYSRESETREQ to perform a soft reset
cortex_m reset_config sysresetreq

# Only TRSTn supported
reset_config trst_only

#
# Event handlers
#

# reset-init event handler
$_TARGETNAME configure -event reset-init {
    global ITCM_ALIASES

    # device reset-init
    # lr/r14 is 0xffffffff on reset
    # This can cause gdb to generate errors of the following form early on:
    # "Error: address + size wrapped(0xffffffff, 0x00000004)"
    # To avoid these we zeroize lr here
    reg lr 0

    # Ensure that xPSR/EPSR T (Thumb) bit (bit 24) is set otherwise execution
    # will result in hard fault. T bit is loaded from bit 0 of the reset 
    # vector. This could be 0 if, for example, eNVM is zeroized.
    reg xPSR 0x01000000

    # If necessary set Auxiliary Control Register (0xe000e008) ITCMUAEN and 
    # ITCMLAEN bits to 1 to ensure that ITCM (if available/implemented) is 
    # mapped to 0x10000000 (ITCMUAEN == 1) and also 0x00000000 (ITCMLAEN == 1).
    # See also:
    # http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0413d/CIHEJHAJ.html
    if {$ITCM_ALIASES eq "Y"} {
        mww 0xe000e008 0x00000018
    }

    # call board level reset-init if defined
    if {[exists -proc do_board_reset_init]} {
        do_board_reset_init
    }
}

# examine-end event handler
$_TARGETNAME configure -event examine-end {
    # Check that we are, in fact, talking to a Cortex-M1
    # http://infocenter.arm.com/help/topic/com.arm.doc.ddi0413d/Cihhbddh.html
    mem2array a 32 0xe000ed00 1
    set cpuid [expr (($a(0) >> 4) & 0x00000fff)]
    if {$cpuid ne 0x00000c21} {
        error "Failed to detect Cortex-M1"
    }
}

# gdb-detach event handler
$_TARGETNAME configure -event gdb-detach {
    # resume execution on debugger detach
    resume
}

# TODO: why does this eliminate the second (redundant?) probe/examine?
proc init_reset {mode} {
}
